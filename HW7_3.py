# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
class Cell:
    def __init__(self, c):
        self.cell_cells = c

    def __str__(self):
        return f"Cell ({self.cell_cells})"

    def __add__(self, other):
        return f"Результат сложения: {Cell(self.cell_cells + other.cell_cells)}"

    def __sub__(self, other):
        if other.cell_cells > self.cell_cells:
            raise ValueError("Количество ячеек вычитаемой клетки больше.Поменяйте клетки местами.")

        return f"Результат вычитания: {Cell(self.cell_cells - other.cell_cells)}"

    def __mul__(self, other):
        return f"Результат умножения: {Cell(self.cell_cells * other.cell_cells)}"

    def __truediv__(self, other):
        if other.cell_cells > self.cell_cells:
            raise ValueError("Количество ячеек делимой клетки больше.Поменяйте клетки местами.")

        return f"Результат деления: {Cell(self.cell_cells // other.cell_cells)}\n"

    def make_order(self, r):
        self.raw = r
        self.str_raw = (self.cell_cells // self.raw) * (self.raw * "@_" + "\n") + self.cell_cells % self.raw * "@_" + '\n'
        print(self.str_raw)

cell_1 = Cell(50)
cell_2 = Cell(16)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
cell_1.make_order(9)
cell_2.make_order(5)
